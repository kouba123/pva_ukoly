using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

class Program
{
    static void Main()
    {
        string[] fileNames = 
        {
            "0000_in.txt",
            "0001_in.txt",
            "0002_in.txt",
            "0003_in.txt",
            "0004_in.txt",
            "0005_in.txt"
        };

        foreach (string fileName in fileNames.Skip(1))
        {
            string inputData = File.ReadAllText(fileName).Replace('\n', ' ').Trim();
            ProcessData(inputData.Split(" "));
            Console.WriteLine("-------------------");
        }
    }

    static void ProcessData(string[] data)
    {
        if (data.Length == 0 || data.Length > 2000)
        {
            Console.WriteLine("Neplatny vstup");
            return;
        }

        List<int> intData = new List<int>();
        foreach (var item in data)
        {
            if (int.TryParse(item, out int num))
            {
                intData.Add(num);
            }
            else
            {
                Console.WriteLine("Neplatny vstup");
                return;
            }
        }

        Dictionary<int, int> sumOccurrences = new Dictionary<int, int>();

        for (int i = 0; i < intData.Count; i++)
        {
            int currentSum = 0;
            for (int j = i; j < intData.Count; j++)
            {
                currentSum += intData[j];
                if (!sumOccurrences.ContainsKey(currentSum))
                {
                    sumOccurrences[currentSum] = 1;
                }
                else
                {
                    sumOccurrences[currentSum]++;
                }
            }
        }

        double totalSum = 0;
        foreach (var kvp in sumOccurrences)
        {
            if (kvp.Value > 1)
            {
                totalSum += CalculateCombinations(kvp.Value, 2);
            }
        }

        Console.WriteLine(totalSum);
    }

    static double CalculateCombinations(int n, int r)
    {
        return Factorial(n) / (Factorial(r) * Factorial(n - r));
    }

    static double Factorial(int n)
    {
        double result = 1;
        for (int i = 1; i <= n; i++)
        {
            result *= i;
        }
        return result;
    }
}
